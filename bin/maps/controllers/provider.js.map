{"version":3,"sources":["controllers/provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAEA,kDAA0B;AAC1B,wDAA0C;AAC1C,0CAA4B;AAC5B,8DAAmD;AACnD,kEAAsC;AAGtC,+BAA+B;AAE/B,MAAM,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC;AAGrC;IAAA;QACI;;;;;WAKG;QACI,gBAAW,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YACrE,sBAAsB;YACtB,IAAI,KAAK,GAAG,SAAS,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAClG,IAAI,KAAK,IAAI,EAAE,EAAE;gBACb,mEAAmE;gBACnE,MAAM,MAAM,GAAG;oBACX,SAAS,EAAE,WAAW;oBACtB,IAAI,EAAE;wBACF,yBAAyB;wBACzB,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS;wBAC/B,UAAU,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ;wBAC7B,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;wBACvC,YAAY,EAAE,KAAK;qBACtB;iBACJ,CAAC;gBACF,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,wBAAwB;gBACzC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;gBACxC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE,IAAI;oBACxC,IAAI,GAAG,EAAE;wBACL,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC/E,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,EAAC,OAAO,EAAE,+CAA+C,EAAC,CAAC,CAAC;qBACnF;yBAAM;wBACH,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,uDAAuD;wBAC5F,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,EAAC,OAAO,EAAE,wCAAwC,EAAC,CAAC,CAAC;qBAC5E;gBACL,CAAC,CAAC,CAAC;aACN;iBAAM;gBACH,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE;oBAChB,OAAO,EAAE,KAAK;oBACd,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS;oBAC7B,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS;oBAC5B,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS;iBAChC,CAAC,CAAC;aACN;QACL,CAAC,CAAC;QAGF;;;;WAIG;QACK,eAAU,GAAG,CAAO,GAAG,EAAE,EAAE;YAC/B,IAAI;gBACA,eAAK,CAAC,GAAG,CAAC,GAAG,gBAAM,CAAC,SAAS,WAAW,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;oBACpD,IAAI,IAAI,GAAG,EAAE,CAAC;oBACd,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE;wBACtB,IAAI,IAAI,KAAK,CAAC;oBAClB,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;wBAChB,IAAI,IAAI,KAAK,EAAE,EAAE;4BACb,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BACnC,IAAI,OAAO,WAAW,CAAC,OAAO,KAAK,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gCAC9E,IAAI,UAAU,GAAG,EAAE,CAAC;gCACpB,IAAI,SAAS,GAAG,EAAE,CAAC;gCACnB,IAAI,WAAW,GAAG,EAAE,CAAC;gCACrB,IAAI,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,KAAK,WAAW,EAAE;oCAC1D,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;iCAClD;gCACD,IAAI,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,KAAK,WAAW,EAAE;oCACzD,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;iCAChD;gCACD,IAAI,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,WAAW,EAAE;oCAC3D,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;iCACpD;gCACD,gCAAgC;gCAChC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;6BACpE;yBACJ;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;oBACnB,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;aACN;YAAC,OAAO,CAAC,EAAE;gBACR,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAClB;QACL,CAAC,CAAA,CAAC;QAGN,2DAA2D;QAChD,YAAO,GAAG,GAAG,EAAE;YAClB,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,wBAAwB;YACzC,uBAAS,CAAC,WAAW,CAAC,aAAa,EAAE,GAAG,EAAE;gBACtC,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC;gBACjE,IAAI,CAAC,0BAA0B,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBAC1C,IAAI,CAAC,GAAG,EAAE;wBACN,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,IAAI;4BAC7B,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;4BAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;wBACpC,CAAC,CAAC,CAAC;qBACN;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QAGF;;;WAGG;QACK,+BAA0B,GAAG,CAAC,QAAQ,EAAE,EAAE;YAC9C,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACxC,MAAM,MAAM,GAAG;gBACX,SAAS,EAAE,WAAW;gBACtB,oBAAoB,EAAE,WAAW;gBACjC,gBAAgB,EAAE,6BAA6B;gBAC/C,wBAAwB,EAAE;oBACtB,aAAa,EAAE,YAAY;iBAC9B;gBACD,yBAAyB,EAAE;oBACvB,eAAe,EAAE,KAAK;iBACzB;aACJ,CAAC;YAEF,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE,IAAI;gBACzC,IAAI,GAAG,EAAE;oBACL,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;oBACvE,OAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;iBAC9B;qBAAM;oBACH,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACxD,OAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;iBAC/B;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QAGF;;;;;;WAMG;QACK,uBAAkB,GAAG,CAAC,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,EAAE;YAEpE,0GAA0G;YAE1G,MAAM,WAAW,GAAG,CAAC,GAAG,EAAE,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CACzB,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7D,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,CACrD,CAAC;gBACF,OAAO,GAAG,CAAC;YACf,CAAC,CAAC;YAEF,WAAW,CAAC,SAAS,CAAC,CAAC;YACvB,WAAW,CAAC,UAAU,CAAC,CAAC;YACxB,WAAW,CAAC,UAAU,CAAC,CAAC;YAExB,qDAAqD;YACrD,oDAAoD;YACpD,sDAAsD;YAEtD,IAAI,MAAM,GAAG;gBACT,SAAS,EAAE,WAAW;gBACtB,GAAG,EAAE;oBACD,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC;iBAC3B;gBACD,yCAAyC;gBACzC,yBAAyB,EAAE;oBACvB,YAAY,EAAE,SAAS;oBACvB,aAAa,EAAE,UAAU;oBACzB,aAAa,EAAE,UAAU;oBACzB,eAAe,EAAE,IAAI;iBAExB;gBACD,gBAAgB,EAAE,4GAA4G;gBAC9H,YAAY,EAAE,aAAa;aAC9B,CAAC;YAEF,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;YAClD,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE,IAAI;gBAC3C,IAAI,GAAG,EAAE;oBACL,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;iBACrF;qBAAM;oBACH,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;iBACvE;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;IAEN,CAAC;CAAA;AAED,kBAAe,IAAI,SAAS,EAAE,CAAC","file":"../../controllers/provider.js","sourcesContent":["import async from \"async\";\r\nimport {Request, Response, NextFunction} from \"express\";\r\nimport https from \"https\";\r\nimport * as validator from \"../validator\";\r\nimport * as db from \"../db\";\r\nimport {default as config} from \"../config/config\";\r\nimport scheduler from \"node-schedule\";\r\n\r\n\r\n//import uuidV1 from 'uuid/v1';\r\n\r\nconst dynamoClient = db.dynamoClient;\r\n\r\n\r\nclass Providers {\r\n    /***\r\n     *\r\n     * @param {e.Request} req\r\n     * @param {e.Response} res\r\n     * @param {e.NextFunction} next\r\n     */\r\n    public addProvider = (req: Request, res: Response, next: NextFunction) => {\r\n        //Validate Form Fields\r\n        let error = validator.validateProvider(req.body.firstName, req.body.lastName, req.body.NPINumber);\r\n        if (error == \"\") {\r\n            //Means at least 1 field is filled and now we have validated fields\r\n            const params = {\r\n                TableName: \"Providers\",\r\n                Item: {\r\n                    //\"ProviderId\": uuidV1(),\r\n                    \"FirstName\": req.body.firstName,\r\n                    \"LastName\": req.body.lastName,\r\n                    \"NPINumber\": Number(req.body.NPINumber),\r\n                    \"IsFullInfo\": false,\r\n                }\r\n            };\r\n            let self = this; // save object reference\r\n            console.log(\"Adding a new provider...\");\r\n            dynamoClient.put(params, function (err, data) {\r\n                if (err) {\r\n                    console.error(\"Unable to add item. Error JSON:\", JSON.stringify(err, null, 2));\r\n                    res.render('index', {message: 'Ohh! Some thing went wrong, Please try again.'});\r\n                } else {\r\n                    console.log(\"Added item:\", JSON.stringify(data, null, 2));\r\n                    self.callNpiAPI(req.body.NPINumber); //Call NPI Registry API to retrieve further information\r\n                    res.render('index', {message: 'You have been successfully registered.'});\r\n                }\r\n            });\r\n        } else {\r\n            res.render('index', {\r\n                message: error,\r\n                firstName: req.body.firstName,\r\n                lastName: req.body.firstName,\r\n                NPINumber: req.body.NPINumber\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    /****\r\n     * @purpose: Calling NPI GET API to retrieve and update further information\r\n     * @param npi\r\n     * @returns {Promise<void>}\r\n     */\r\n    private callNpiAPI = async (npi) => {\r\n        try {\r\n            https.get(`${config.npiApiUrl}?number=${npi}`, (resp) => {\r\n                let data = '';\r\n                resp.on('data', (chunk) => {\r\n                    data += chunk;\r\n                });\r\n\r\n                resp.on('end', () => {\r\n                    if (data !== '') {\r\n                        let parsed_data = JSON.parse(data);\r\n                        if (typeof parsed_data.results !== \"undefined\" && parsed_data.results.length > 0) {\r\n                            let taxonomies = {};\r\n                            let addresses = {};\r\n                            let identifiers = {};\r\n                            if (typeof parsed_data.results[0].taxonomies !== \"undefined\") {\r\n                                taxonomies = parsed_data.results[0].taxonomies;\r\n                            }\r\n                            if (typeof parsed_data.results[0].addresses !== \"undefined\") {\r\n                                addresses = parsed_data.results[0].addresses;\r\n                            }\r\n                            if (typeof parsed_data.results[0].identifiers !== \"undefined\") {\r\n                                identifiers = parsed_data.results[0].identifiers;\r\n                            }\r\n                            //Let's update the dynamodb item\r\n                            this.updateOtherDetails(npi, taxonomies, addresses, identifiers);\r\n                        }\r\n                    }\r\n                });\r\n            }).on(\"error\", (err) => {\r\n                console.log(\"Error: \" + err.message);\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n\r\n//Cron job which will be use full when NPI registry is down\r\n    public cronJob = () => {\r\n        let self = this; // save object reference\r\n        scheduler.scheduleJob('*/1 * * * *', () => {\r\n            console.log('The answer to life, the universe, and everything!');\r\n            this.getItemsWithIncompleteInfo((err, data) => {\r\n                if (!err) {\r\n                    data.Items.forEach(function (item) {\r\n                        console.log(\" -\", item.NPINumber);\r\n                        self.callNpiAPI(item.NPINumber);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n    /***\r\n     * @purpose: This method will get all the providers with incomplete information.\r\n     * @param callback\r\n     */\r\n    private getItemsWithIncompleteInfo = (callback) => {\r\n        console.log(\"Getting Incomplete Items\");\r\n        const params = {\r\n            TableName: \"Providers\",\r\n            ProjectionExpression: \"NPINumber\",\r\n            FilterExpression: \"#IsFullInfo = :is_full_info\",\r\n            ExpressionAttributeNames: {\r\n                \"#IsFullInfo\": \"IsFullInfo\",\r\n            },\r\n            ExpressionAttributeValues: {\r\n                \":is_full_info\": false\r\n            }\r\n        };\r\n\r\n        dynamoClient.scan(params, function (err, data) {\r\n            if (err) {\r\n                console.error(\"Unable to query. Error:\", JSON.stringify(err, null, 2));\r\n                return callback(err, null);\r\n            } else {\r\n                console.log(`Query succeeded. ${JSON.stringify(data)}`);\r\n                return callback(null, data);\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    /***\r\n     *\r\n     * @param npi\r\n     * @param taxonomies\r\n     * @param addresses\r\n     * @param identifier\r\n     */\r\n    private updateOtherDetails = (npi, taxonomies, addresses, identifier) => {\r\n\r\n        //Remove Blank Attributes from an object (Because dynamoDB throws error with attributes with empty string)\r\n\r\n        const removeEmpty = (obj) => {\r\n            Object.keys(obj).forEach(k =>\r\n                (obj[k] && typeof obj[k] === 'object') && removeEmpty(obj[k]) ||\r\n                (!obj[k] && obj[k] !== undefined) && delete obj[k]\r\n            );\r\n            return obj;\r\n        };\r\n\r\n        removeEmpty(addresses);\r\n        removeEmpty(taxonomies);\r\n        removeEmpty(identifier);\r\n\r\n        // console.log(`TAXO ${JSON.stringify(taxonomies)}`);\r\n        // console.log(`Addr ${JSON.stringify(addresses)}`);\r\n        // console.log(`Ident ${JSON.stringify(identifier)}`);\r\n\r\n        let params = {\r\n            TableName: \"Providers\",\r\n            Key: {\r\n                \"NPINumber\": Number(npi)\r\n            },\r\n            //ConditionExpression: \"NPINumber = :id\",\r\n            ExpressionAttributeValues: {\r\n                \":addresses\": addresses,\r\n                \":identifier\": identifier,\r\n                \":taxonomies\": taxonomies,\r\n                \":is_full_info\": true\r\n\r\n            },\r\n            UpdateExpression: \"SET Taxonomies = :taxonomies, Addresses = :addresses,  Identifier = :identifier, IsFullInfo= :is_full_info\",\r\n            ReturnValues: \"UPDATED_NEW\"\r\n        };\r\n\r\n        console.log(\"Attempting a conditional update...\");\r\n        dynamoClient.update(params, function (err, data) {\r\n            if (err) {\r\n                console.error(\"Unable to update item. Error JSON:\", JSON.stringify(err, null, 2));\r\n            } else {\r\n                console.log(\"UpdateItem succeeded:\", JSON.stringify(data, null, 2));\r\n            }\r\n        });\r\n    };\r\n\r\n}\r\n\r\nexport default new Providers();\r\n"]}