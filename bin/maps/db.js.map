{"version":3,"sources":["db.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6DAAkD;AAClD,6CAA+B;AAI/B,IAAI,oBAAoB,GAA+B;IACnD,MAAM,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM;IACzB,QAAQ,EAAE,gBAAM,CAAC,GAAG,CAAC,QAAQ;CAChC,CAAC;AAGS,QAAA,YAAY,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC;AAErE,QAAA,QAAQ,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;AAG7D;;;;;;;GAOG;AACQ,QAAA,mBAAmB,GAAG,CAAC,SAAS,EAAC,UAAU,EAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;IACrE,IAAI,MAAM,GAAG,EAAC,SAAS,EAAE,SAAS,EAAC,CAAC;IACpC,IAAI;QACA,gBAAQ,CAAC,aAAa,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE,IAAI;YAC9C,IAAI,GAAG,EAAE;gBACL,MAAM,MAAM,GAAG;oBACX,SAAS,EAAE,SAAS;oBACpB,SAAS,EAAE;wBACP,EAAC,aAAa,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC,eAAe;qBAC/D;oBACD,oBAAoB,EAAE;wBAClB,EAAC,aAAa,EAAE,UAAU,EAAE,aAAa,EAAE,IAAI,EAAC;qBACnD;oBACD,qBAAqB,EAAE;wBACnB,iBAAiB,EAAE,EAAE;wBACrB,kBAAkB,EAAE,EAAE;qBACzB;iBACJ,CAAC;gBAEF,gBAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAA,EAAE;oBAC9C,OAAO,CAAC,GAAG,CAAC,iBAAiB,SAAS,EAAE,CAAC,CAAC;oBAC1C,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC1B,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;oBACb,OAAO,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;aACN;iBACI;gBACD,OAAO,QAAQ,CAAC,qBAAqB,CAAC,CAAC;aAC1C;QACL,CAAC,CAAC,CAAC;KACN;IAAC,OAAO,KAAK,EAAE;QACZ,OAAO,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAClC;AAGL,CAAC,CAAC","file":"../db.js","sourcesContent":["import {default as config} from \"./config/config\";\r\nimport * as AWS from \"aws-sdk\";\r\nimport {ServiceConfigurationOptions} from 'aws-sdk/lib/service';\r\n\r\n\r\nlet serviceConfigOptions:ServiceConfigurationOptions = {\r\n    region: config.aws.region,\r\n    endpoint: config.aws.endpoint\r\n};\r\n\r\n\r\nexport let dynamoClient = new AWS.DynamoDB.DocumentClient(serviceConfigOptions);\r\n\r\nexport let dynamoDb = new AWS.DynamoDB(serviceConfigOptions);\r\n\r\n\r\n/***\r\n * @purpose: This method will only create the table if it doesn't exist\r\n *@param tableName\r\n * @param primaryKey\r\n * @param type\r\n * @param callback\r\n * @returns {any}\r\n */\r\nexport let checkAndCreateTable = (tableName,primaryKey,type, callback) => {\r\n    let params = {TableName: tableName};\r\n    try {\r\n        dynamoDb.describeTable(params, function (err, data) {\r\n            if (err) {\r\n                const params = {\r\n                    TableName: tableName,\r\n                    KeySchema: [\r\n                        {AttributeName: primaryKey, KeyType: \"HASH\"} //Partition key\r\n                    ],\r\n                    AttributeDefinitions: [\r\n                        {AttributeName: primaryKey, AttributeType: type}\r\n                    ],\r\n                    ProvisionedThroughput: {\r\n                        ReadCapacityUnits: 10,\r\n                        WriteCapacityUnits: 10\r\n                    }\r\n                };\r\n\r\n                dynamoDb.createTable(params).promise().then(data=> {\r\n                    console.log(`Created table ${tableName}`);\r\n                    return callback(data);\r\n                }).catch(error => {\r\n                    return callback(error.message);\r\n                });\r\n            }\r\n            else {\r\n                return callback(\"table already exist\");\r\n            }\r\n        });\r\n    } catch (error) {\r\n        return callback(error.message);\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n"]}