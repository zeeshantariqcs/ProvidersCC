{"version":3,"sources":["main.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sDAA8B;AAC9B,8DAAqC;AACrC,2CAA6B;AAG7B,yCAA2B;AAC3B,sEAA8C;AAE9C,4CAA4C;AAC5C,EAAE,CAAC,mBAAmB,CAAC,WAAW,EAAE,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE;IAC3D,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,EAAE,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC;AAGH,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;AAEzD,IAAI,GAAG,GAAG,iBAAO,EAAE,CAAC;AAEpB,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;AAC1C,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AAC9B,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;AAGhD,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;AAEjD,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AACrD,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,iBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;AAGtF,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC5B,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC;AAEH,8CAA8C;AAC9C,uDAAuD;AACvD,+EAA+E;AAC/E,MAAM;AAEN,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,kBAAQ,CAAC,WAAW,CAAC,CAAC;AAE5C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE;IAC7B,OAAO,CAAC,GAAG,CACP,oDAAoD,EACpD,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EACf,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CACjB,CAAC;IACF,kBAAQ,CAAC,OAAO,EAAE,CAAC,CAAE,sDAAsD;IAC3E,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC;AAEH,kBAAe,GAAG,CAAC","file":"../main.js","sourcesContent":["import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport * as path from \"path\";\n//const path = require('path');\nimport {default as config} from \"./config/config\";\nimport * as db from \"./db\";\nimport Provider from \"./controllers/provider\";\n\n//Create Providers table if it doesn't exist\ndb.checkAndCreateTable(\"Providers\", \"NPINumber\", \"N\", (resp) => {\n    console.log(`response is this ${resp}`);\n});\n\n\nlet resources = path.join(__dirname, '../', 'resources');\n\nlet app = express();\n\napp.set(\"port\", process.env.PORT || 3000);\napp.set('view engine', 'ejs');\napp.set('views', path.join(resources, 'views'));\n\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: true}));\n\napp.use(express.static(path.join(resources, 'web')));\napp.use('/node_modules', express.static(path.join(__dirname, '../', 'node_modules')));\n\n\napp.get('/', (req, res, next) => {\n    res.render('index');\n});\n\n// app.post('/register', (req, res, next) => {\n//     let {firstName, lastName, NPINumber} = req.body;\n//     res.render('index', {message: 'You have been successfully registered'});\n// });\n\napp.post(\"/register\", Provider.addProvider);\n\napp.listen(app.get(\"port\"), () => {\n    console.log(\n        \"  App is running at http://localhost:%d in %s mode\",\n        app.get(\"port\"),\n        app.get(\"env\")\n    );\n    Provider.cronJob();  //Run Cron Job To Handle NPI Registry Server Down Time\n    console.log(\"  Press CTRL-C to stop\\n\");\n});\n\nexport default app;\n"]}